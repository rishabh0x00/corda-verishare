apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    compile project(":contracts")
    compile project(":workflows")

    // Spring boot.
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jersey
    compile("org.springframework.boot:spring-boot-starter-jersey:1.2.0.RELEASE") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    compile ("org.springframework.boot:spring-boot-starter-security:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }


    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6'

    // jackson dependency
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
    
    // Logging.
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

springBoot {
    mainClassName = "com.deqode.webserver.ServerKt"
}

task runClientA(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.ClientKt'
    args "${rpcHostA}:${rpcPortA}", "${rpcUsernameA}", "${rpcPasswordA}"
}

task runServerA(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.webserver.ServerKt'
    args "--server.host=${springHostA}", "--server.port=${springPortA}",
            "--config.rpc.host=${rpcHostA}", "--config.rpc.port=${rpcPortA}", "--config.rpc.username=${rpcUsernameA}", "--config.rpc.password=${rpcPasswordA}"
}

task runClientB(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.ClientKt'
    args "${rpcHostB}:${rpcPortB}", "${rpcUsernameB}", "${rpcPasswordB}"
}

task runServerB(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.webserver.ServerKt'
    args "--server.host=${springHostB}", "--server.port=${springPortB}",
            "--config" +
            ".rpc.host=${rpcHostB}", "--config.rpc.port=${rpcPortB}", "--config.rpc.username=${rpcUsernameB}", "--config.rpc.password=${rpcPasswordB}"
}

task runClientC(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.ClientKt'
    args "${rpcHostC}:${rpcPortC}", "${rpcUsernameC}", "${rpcPasswordC}"
}

task runServerC(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.deqode.webserver.ServerKt'
    args "--server.host=${springHostC}", "--server.port=${springPortC}",
            "--config.rpc.host=${rpcHostC}", "--config.rpc.port=${rpcPortC}", "--config.rpc.username=${rpcUsernameC}", "--config.rpc.password=${rpcPasswordC}"
}

task showProperties {
    doLast {
        println "Version: $version"
        println "$springHostC: $springPortC: :$springHostB: $springPortB"
    }
}
