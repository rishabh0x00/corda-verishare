version: "3.5"

volumes:
  dist-html-0:
  postgres-data-0:
  redis-data-0:
  spring-node-a-data:

services:
  # ================ Envoy ========================
  envoy:
    image: envoyproxy/envoy:latest
    command:
      - /usr/local/bin/envoy
      - -c
      - /etc/envoy/envoy.yaml
    volumes:
      - ${PWD}/envoy/front-envoy.yaml:/etc/envoy/envoy.yaml
      - ${PWD}/envoy/get-certs/pem/fullchain.pem:/etc/envoy.crt
      - ${PWD}/envoy/get-certs/pem/privkey.pem:/etc/envoy.key
    ports:
      - "80:80"
      - "443:443"
      - "9901:9901"

  # =================== xx =======================

  # =================== Backend ===================
  postgres-0:
    image: postgres
    env_file:
      - ./envs/node-0/postgres.env
    volumes:
      - postgres-data-0:/var/lib/postgresql/data

  redis-0:
    image: redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data-0:/data
    restart: always

  keycloak-0:
    image: jboss/keycloak
    env_file:
      - ./envs/node-0/keycloak.env
      - ./envs/node-0/postgres.env
    depends_on:
      - postgres-0
    ports:
      - 8080:8080

  backend-0:
    build:
      context: "./backend"
    command:
      - make
      - dev
    env_file:
      - ./envs/node-0/backend.env
      - ./envs/node-0/postgres.env
    ports:
      - 3000:3000
    volumes:
      - /opt/node_modules
      - ./backend:/opt

  react-0:
    build:
      context: ./react
    command: ["npm", "start"]
    ports:
      - "4000:3000"
    volumes:
      - /app/node_modules
      - ./react:/app

  mailhog-0:
    image: mailhog/mailhog
    expose:
      - 1025
      - 8025
    ports:
      - "1025:1025"
      - "8025:8025"
    entrypoint: ["/bin/sh", "-c", "MailHog &>/dev/null"]

  swagger-0:
    build:
      context: ./swagger-api/
    ports:
      - "8888:8080"
    volumes:
      - ./swagger-api/swagger:/swagger-api:delegated

  # ========================= xx ==========================

  # ========================Corda==========================
  notary:
    ports:
      - "10001:10001"
      - "10002:10002"
      - "10003:10003"
      - "2223:2223"
    image: corda/corda-zulu-java1.8-4.3:latest
    container_name: notary
    volumes:
      - ./corda/build/nodes/Notary/node.conf:/etc/corda/node.conf
      - ./corda/build/nodes/Notary/cordapps/:/opt/corda/cordapps/
      - ./corda/build/nodes/Notary/certificates/:/opt/corda/certificates/
      - ./corda/build/nodes/Notary/network-parameters:/opt/corda/network-parameters
      - ./corda/build/nodes/Notary/additional-node-infos/:/opt/corda/additional-node-infos/
      - ./corda/build/nodes/Notary/logs/:/opt/corda/logs/

  corda-node-0:
    ports:
      - "10004:10004"
      - "10005:10005"
      - "10006:10006"
      - "2224:2224"
    image: corda/corda-zulu-java1.8-4.3:latest
    container_name: partya
    volumes:
      - ./corda/build/nodes/PartyA/node.conf:/etc/corda/node.conf
      - ./corda/build/nodes/PartyA/cordapps/:/opt/corda/cordapps/
      - ./corda/build/nodes/PartyA/certificates/:/opt/corda/certificates/
      - ./corda/build/nodes/PartyA/network-parameters:/opt/corda/network-parameters
      - ./corda/build/nodes/PartyA/additional-node-infos/:/opt/corda/additional-node-infos/
      - ./corda/build/nodes/PartyA/logs/:/opt/corda/logs/      

  spring-node-0:
    ports:
      - "8432:8432"
    container_name: spring-node-a
    build:
      context: corda/clients
      dockerfile: Dockerfile
    image: spring-boot-docker:v1.1
    depends_on:
      - corda-node-0
    restart: always
    env_file:
      - ./envs/node-0/corda.env
    command: sh -c "sh entrypoint.sh"
    volumes:
      - spring-node-a-data:/tmp

    #========================= xx ======================

networks:
  default:
    external:
      name: deqode
